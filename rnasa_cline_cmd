                             R blog link for pridiction 
http://www.tatvic.com/blog/logistic-regression-with-r/
http://www.r-bloggers.com/predict-users-return-visit-within-a-day-part-3/
____________________________________________________________________________
y1 = read.table("200ns200")
colnames(y1) <- c("ip","date","ofc","url","sucess_code","bytes_return")
y1 <- y1[-3]
y9 = y1
time =  substr(y2$date, 14,21)
 date =  substr(y2$date, 2,12)
y9$date <- date
y9$time <- time
save.image(file="y9")
https://en.wikibooks.org/wiki/Data_Mining_Algorithms_In_R/Sequence_Mining/SPADE
_______________________________________________________________________________________________
A =gsub("shuttle","A",smpl_url)
ns1 <- read.table("200ns200",sep = "/",header = FALSE)
library(RH2)
library(sqldf)
library(RPostgreSQL)
library(dplyr)
_____________________________________________________________________
sudo add-apt-repository ppa:marutter/rrutter
sudo apt-get update
sudo apt-get install r-base r-base-dev

data.frame(df$A,df$B,df$E)
GeminiTable_germ <- data.frame(v16 = "ASN_MAF=0.09;DOMAINS=Pfam_domain:PF00168,Prints_domain:.")
__________________________________________________________________________________________________________-
                        levels of url for k2k matrix 
write.csv(un6, '/home/hduser/Shubham/R_R/un62.csv', row.names=T)
write.csv(smpl_100, '/home/hduser/Shubham/R_R/smpl_100.csv', row.names=T)
read.csv('/home/hduser/Shubham/R_R/smpl_1001.csv',header=T,sep =',')
___________________________________________________________________________________________________________________________
 object_name <- read.csv('/home/hduser/Shubham/R_R/smpl_1001.csv',header=T,sep =',')
                 ip                                                             request status  bytes        date     time
1    199.120.110.21           GET /shuttle/missions/sts-73/mission-sts-73.html HTTP/1.0    200   4085 01/Jul/1995 00:00:09
2   205.212.115.106                      GET /shuttle/countdown/countdown.html HTTP/1.0    200   3985 01/Jul/1995 00:00:12
3    205.189.154.54            GET /shuttle/missions/sts-71/images/images.html HTTP/1.0    200   7634 01/Jul/1995 00:01:08
4   205.212.115.106            GET /shuttle/missions/sts-71/images/images.html HTTP/1.0    200   7634 01/Jul/1995 00:01:13
5      199.33.32.50                        GET /shuttle/countdown/liftoff.html HTTP/1.0    200   4538 01/Jul/1995 00:02:12
6   129.188.154.200                                  GET /facts/about_ksc.html HTTP/1.0    200   3977 01/Jul/1995 00:03:12
7    205.189.154.54            GET /shuttle/missions/sts-71/images/images.html HTTP/1.0    200   7634 01/Jul/1995 00:03:51
8    129.94.144.152        GET /shuttle/technology/sts-newsref/stsref-toc.html HTTP/1.0    200  84907 01/Jul/1995 00:04:25
9   129.188.154.200           GET /shuttle/missions/sts-71/mission-sts-71.html HTTP/1.0    200  12040 01/Jul/1995 00:04:27
10    199.166.39.14                        GET /shuttle/countdown/liftoff.html HTTP/1.0    200   4538 01/Jul/1995 00:05:26
__________________________________________________________________________________________________________________________________
yahu1 <- read.csv('/home/hduser/Shubham/R_R/un62.csv',header=F,sep ='/','/')
yahu1 <- read.csv('/home/hduser/Shubham/R_R/un62.csv'  header = TRUE,sep = '/')
dfm = yahu1
dfm <- read.csv("rq_log.csv",header = FALSE,sep = "/")

library(sos,lsa)
install.package("COSINE")
library(COSINE)
Loading required package: MASS
Loading required package: genalg
 install.packages("MASS")
___________________________________________________________________________________________________________
kl_reslt= dist(klevel, method = "Euclidean")
k2k_reslt= dist(k2k, method = "euclidean")
________________________________________________________________________________________________
hist(un6_reslt)

> hist(k2k_reslt)
> hist(kl_reslt)
hist(kl_reslt,col="red",pch=19)
> plot(klevel)
> plot(kl_reslt)
> plot(un6)
> plot(un6_reslt)
> plot(k2k)
> plot(k2k,pch=19)
plot(k2k,col="green",pch=1)
> plot(k2k,pch=1)
> plot(k2k)
> plot(un6_reslt)
> plot(un6)
> plot(kl_reslt)
> plot(klevel)
_______________________________________________________________________________________________

                      sqldf for remove .html from levels
409               Mar95_full.html
sqldf("select distinct(v1) from yahu1_sql where V1  like  '%.html%' ")
C1=sqldf("select distinct(v1) from yahu1_sql where V1 not like  '%.html%' ")
C2=sqldf("select distinct(v2) from yahu1_sql where V2 not like  '%.html%' ")
C3=sqldf("select distinct(v3) from yahu1_sql where V3 not like  '%.html%' ")
C4=sqldf("select distinct(v4) from yahu1_sql where V4 not like  '%.html%' ")

write.csv(C1, '/home/hduser/Shubham/R_R/c1', row.names=F)
write.csv(C2, '/home/hduser/Shubham/R_R/c2', row.names=F)
write.csv(C3, '/home/hduser/Shubham/R_R/c3', row.names=F)
write.csv(C4, '/home/hduser/Shubham/R_R/c4', row.names=F)

c1+c2+c3+c4= nasa_final
pakadiya <- read.csv('/home/hduser/Shubham/R_R/nasa_final',header=F,sep =',')
> pakadiya
_________________________________________________________________________________________________________
a = gsub("shuttle","A",nm$V2)
b = gsub("mission","A11",a)
c = gsub("sts-newsref","A22",b)
d = gsub("sts","A21",c)
e = gsub("technology","A12",d)
f = gsub("countdown","A13",e)

___________________________________________________________________________________________________________________
test10_sep<-read.csv('/home/hduser/Shubham/R_R/tst10',header=F,sep ="/",quote ="F")
 
 "129.94.144.152","GET  shuttle          technology         sts-newsref     stsref-toc.html HTTP         1.0",200         
 "129.188.154.200","GET  shuttle            missions              sts-71 mission-sts-71.html HTTP         1.0",200         
 "199.166.39.14","GET  shuttle           countdown   liftoff.html HTTP                 1.0",200                          
> 
> ________________________________________________________________________________________________

 m_into_k <- sqldf("select distinct(ip),request from logw_smpl where request like  '%.html%' ")
> head(m_into_k)
               ip                                                   request
1  199.120.110.21 GET /shuttle/missions/sts-73/mission-sts-73.html HTTP/1.0
2 205.212.115.106            GET /shuttle/countdown/countdown.html HTTP/1.0
_____________________________________________________________________________________________________________
                                     training_data

 training_data <- m_into_k_smpl
 training_data 
                V1                                                     V2
1    205.188.0.173            /shuttle/missions/sts-71/images/images.html
2   204.212.254.71           /shuttle/missions/sts-71/mission-sts-71.html
3  129.188.154.200            /shuttle/missions/sts-71/images/images.html

plot(training_data)
_________________________________________________________________________________________________________________

write.csv(m_into_k, '/home/hduser/Shubham/R_R/m_into_k.csv', row.names=T)
____________________________________________________________________________________________________________________
read.csv('/home/hduser/Shubham/R_R/m_into_k_smpl.csv',header=F,sep =',')
                V1                                                     V2 V3 V4
1    205.188.0.173            /shuttle/missions/sts-71/images/images.html NA NA
2   204.212.254.71           /shuttle/missions/sts-71/mission-sts-71.html NA NA
__________________________________________________________________________________________________________
dist(m_into_k_smpl,method = "euclidean",diag = FALSE,p=1)
    1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
2  NA                                                                                                
3  NA NA                                                                                             
4  NA NA NA                                                                                          
5  NA NA NA NA                                                                                       
6  NA NA NA NA NA                                                                                    
7  NA NA NA NA NA NA                                                                                 
8  NA NA NA NA NA NA NA                                                                              
9  NA NA NA NA NA NA NA NA   
_____________________________________________________________________________________________________
head(x)
 x
 [1] 205.188.0.173   204.212.254.71  129.188.154.200 156.151.176.30  204.227.13.26   129.188.154.200
 [7] 129.188.154.200 204.227.13.26   202.70.0.6      134.20.175.12   202.36.46.52    129.59.205.2   
  
head(y)
 [1] /shuttle/missions/sts-71/images/images.html           
 [2] /shuttle/missions/sts-71/mission-sts-71.html          
 [3] /shuttle/missions/sts-71/images/images.html           

bond <- cbind(x,y)
bond
       x  y
 [1,] 20 12
 [2,] 18 13
 [3,]  2 12
 [4,] 10  5
 [5,] 19 13

dist(bond)
           1         2         3         4         5         6         7         8         9        10        11
2   2.236068                                                                                                    
3  18.000000 16.031220                                                                                          
4  12.206556 11.313708 10.630146                                                                                
5   1.414214  1.000000 17.029386 12.041595                                                                      
6  18.681542 17.088007  5.000000  8.246211 18.027756                                                            
7  18.973666 17.464249  6.000000  8.062258 18.384776  1.000000                                                  
8   3.162278  2.236068 17.262677 13.453624  2.000000 18.788294 19.235384                                        
9   4.472136  3.605551 14.142136  7.810250  4.242641 14.317821 14.560220  5.830952   

> dist(rbind(x, y), method = "binary"  )
  x
y 0
> dist(rbind(x, y), method = "maximum"  )
   x
y 12
> dist(rbind(x, y), method = "canberra"  )
         x
y 12.25772
> dist(rbind(x, y), method = "manhattan"  )
    x
y 207            

        
_______________________________________________________________________________________
                                    create simileraty_matrix 
 

(the distance measure to be used. This must be one of "euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski". 
Any unambiguous substring can be given.)

m<-x
k<-y
similarti_matrix <- cbind(m,k)
 similarti_matrix
       m  k
 [1,] 20 12
 [2,] 18 13
 [3,]  2 12
 [4,] 10  5
 [5,] 19 13
 [6,]  2  7
 [7,]  2  6
 [8,] 19 15
 [9,] 16 10
[10,]  5 13
_____________________________________________________________________________
d1 <- as.data.frame.table(cbind(k))
k3 <- data.frame(d1,k)
k1111 <- logw$request
d2 <- as.data.frame.table(cbind(k1111))
similarti_tbl_code <-data.frame(d2,k1111)
____________________________________________________________________________
__
emm_nasa <- as.data.frame.table(emm_nasa)
> emm_nasa
   Var1 Var2 Freq
1     A    A   20
2     B    A   18
3     C    A    2
4     D    A   10
5     E    A   19
6     F    A    2
7     G    A    2
8     A    B   19
9     B    B   16
10    C    B    5
11    D    B   15
12    E    B    3
_______________________________________________________________________________
K_code_url <- data.frame(d1,k,sts,dt,tm)

 K_code_url
   Var1 Var2 Freq                                                      k sts          dt       tm
1     A    k   12            /shuttle/missions/sts-71/images/images.html 200 01/Jul/1995 00:00:09
2     B    k   13           /shuttle/missions/sts-71/mission-sts-71.html 200 01/Jul/1995 00:00:12
3     C    k   12            /shuttle/missions/sts-71/images/images.html 200 01/Jul/1995 00:01:08
4     D    k    5                                              /ksc.html 200 01/Jul/1995 00:01:13  
_________________________________________________________________________________

similrt_mtx_tbl <- matrix(data = similarti_matrix, nrow = 4, ncol = 4, byrow = FALSE,dimnames = NULL)
     [,1] [,2] [,3] [,4]
[1,]   20   19   16   15
[2,]   18    2    5    8
[3,]    2    2   15   15
[4,]   10   19    3    7
_____________________________________________________________________________________________________
 dist11 <-dist(similrt_mtx_tbl,method = "euclidean")
> cluster11<-hclust(dist11,method ="average")
> plot(cluster11)
_____________________________________________________________________________________________________
 




________________________________________________________________________________________________________ 



Euclidean_distance <- dist(similarti_matrix,method = "euclidean")
> Euclidean_distance
           1         2         3         4         5         6         7         8         9        10        11
2   2.236068                                                                                                    
3  18.000000 16.031220                                                                                          
4  12.206556 11.313708 10.630146                                                                                
5   1.414214  1.000000 17.029386 12.041595                                                                      
6  18.681542 17.088007  5.000000  8.246211 18.027756                                                            
7  18.973666 17.464249  6.000000  8.062258 18.384776  1.000000                                                  
8   3.162278  2.236068 17.262677 13.453624  2.000000 18.788294 19.235384  
________________________________________________________________________________________________
 dist(1/similrt_mtx_tbl,method = "euclidean")
           1         2         3         4         5         6         7         8         9        10        11
2  1.2285186                                                                                                    
3  1.5089144 1.2062178                                                                                          
4  1.0037964 0.7234056 1.1313189                                                                                
5  1.3820657 1.1638596 1.5767864 0.9737520                                                                      
6  1.0570158 0.9851430 1.1204690 0.8153405 1.3058777                                                            
7  1.4755738 1.3428637 1.1218730 1.1939336 1.5122450 1.1179266                                                  
8  1.0442040 0.6016108 1.1554040 0.4936633 1.0121474 0.8329091 1.1459717                                        
_________________________________________________________________________________
  dist(similrt_mtx_tbl,method = "euclidean")
          1        2        3        4        5        6        7        8        9       10       11       12       13
2  40.38564                                                                                                            
3  41.83300 32.26453                                                                                                   
4  34.27827 32.31099 31.95309                                                                                          
5  33.54102 35.35534 41.89272 32.95451                                                                                 
6  39.40812 38.23611 32.10919 32.49615 44.49719                                                                        
7  35.69314 37.34970 23.62202 28.72281 42.13075 27.80288                                                               
8  32.95451 29.20616 36.38681 33.00000 34.91418 34.71311 35.01428                                            
_______________________________________________________________________________________


as.dist(1/Euclidean_distance)
            1          2          3          4          5          6          7          8          9         10
2  0.44721360                                                                                                   
3  0.05555556 0.06237829                                                                                        
4  0.08192319 0.08838835 0.09407209                                                                             
5  0.70710678 1.00000000 0.05872202 0.08304548                                                                  
6  0.05352877 0.05852057 0.20000000 0.12126781 0.05547002                                                       
7  0.05270463 0.05725983 0.16666667 0.12403473 0.05439283 1.00000000                                            
__________________________________________________________________________________________
mxdst <- dist(similarti_matrix, method = "maximum", diag = FALSE, upper = FALSE, p = 2)
    1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
2   2                                                                                                
3  18 16                                                                                             
4  10  8  8                                                                                          
5   1  1 17  9                                                                                       
6  18 16  5  8 17                                                                                    
7  18 16  6  8 17  1                                                                                 

manhattandst <-dist(similarti_matrix, method = "manhattan", diag = FALSE, upper = FALSE, p = 2)
____________________________________________________________________________________________________________
       markove chain 
library(markovchain) 
mcFit <- markovchainFit(data=m_into_k_smpl)
markovchainFit(data=similarti_matrix)
mk_chai <- markovchainFit(data=similarti_matrix)
markovchainFit(data=Euclidean_distance)
https://stat.ethz.ch/pipermail/r-help/2004-May/050424.html
______________________________________________________________________________________________________________
similrt_mtx_tbl_grf <- graph.adjacency(similrt_mtx_tbl,mode="undirected")
IGRAPH U--- 20 2708 -- 
+ edges:
  [1] 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1 1-- 1
 [20] 1-- 1 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2 1-- 2
 [39] 1-- 3 1-- 3 1-- 3 1-- 3 1-- 3 1-- 3 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4 1-- 4
 [58] 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5 1-- 5

bc <- edge.betweenness.community(similrt_mtx_tbl_grf)
plot(as.dendrogram(bc))

http://stackoverflow.com/questions/27004890/how-to-transform-the-following-similarity-matrix-to-distance-matrix-for-performi
___________________________________________________________________________
gt <- graph.adjacency(similrt_mtx_tbl,mode="undirected")

 plot(gt)
 bc <- edge.betweenness.community(gt)
plot(as.dendrogram(bc))
_______________________________________________________________________________________________
                            create trasition matrix for k*k


transition_mtx <-cbind(k)
transition_mtx <-1/cbind(k)
transition_mtx_mk <- matrix(transition_mtx,nrow=30,ncol=30)
plot(transition_mtx_mk,main="Trasition matrix")

______________________________________________________________________________________________________
                             create relevance matrix in r


 
____________________________________________________________________________________________________
                   Plotting timeseries with dates on x-axis and times on y-axis

> library(maptools)
> library(ggplot2)

_____________________________________________________________________________________________________
                              K Means Clustering
similrt_mtx_tbl_km_clstr <- kmeans(similrt_mtx_tbl,3)

similrt_mtx_tbl_km_clstr

K-means clustering with 3 clusters of sizes 3, 7, 10

Cluster means:
       [,1]     [,2]     [,3]     [,4]      [,5]     [,6]      [,7]     [,8]     [,9]
1  3.666667 14.33333 12.00000 10.66667 14.333333 10.66667  5.333333  9.00000 13.66667
2  5.142857 10.14286 11.57143 10.42857  9.285714 12.28571 13.428571 10.14286 11.14286	
___________________________________________________________________________________________________________-
rqs <- logw$request
write.csv(rqs, '/home/hduser/Shubham/R_R/rqs.csv', row.names=T)
ctry_and_pages <-read.csv('/home/hduser/Shubham/R_R/rqs.csv',header=F,sep ='/','/')
sqldf("select distinct(v2) from ctry_and_pages where V2  like  '%.html%' ")

____________________________________________________________________________________________________________

 ip_friqnci <- as.data.frame(table(user7$ip))
> time_friqnci <- as.data.frame(table(user7$time))
> ___________________________________________________________________________________________________-

                        clarknet data set work
                       _________________________

data.frame(traning_data_clrk$V1,traning_data_clrk$V3)
   traning_data_clrk.V1                           traning_data_clrk.V3
1         199.190.95.27                                 /html/motd.txt
2          161.64.6.122                                 /html/motd.txt
3          159.23.66.71                  /pub/journalism/awesome.htmli
4        128.220.62.124                                 /html/motd.txt
5         141.139.3.133                 /pub/carlaron/Maia/birth+.html
6         199.4.132.213                                 /html/motd.txt
7          204.156.11.1                                 /html/motd.txt
8       129.252.190.150                                 /html/motd.txt
9          155.70.90.33                         /pub/jrinker/html3.htm

________________________________________________________________________________________________________________
v1<- m1
v3 <- k1
similarti_matrix_clrknet <- rbind(m1,k1)
similrt_mtx_tbl_clrk <- matrix(data = similarti_matrix_clrknet, nrow = 20, ncol = 20, byrow = FALSE,dimnames = NULL)
 similrt_mtx_tbl_clrk
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20]
 [1,]   30   29   20   24   25    5   33   17   11     9    40    38    14    21     4    12    18     6    15    39
 [2,]    2    2    5    2    2    2    2    9    2     4     2     2     2     2     3     2     2     2     8     2

___________________________________________________________________________________________________________________

dist(similarti_matrix_clrknet,method = "euclidean")
         m1
k1 135.3366
______________________________________________________________________________________________________________
 mk_chai_clrk <- markovchainFit(data=similarti_matrix_clrknet)

_____________________________________________________________________________________________________________
                     create trasition matrix for k1*k1 


transition_mtx_clrk <-cbind(k1)
transition_mtx_clrk <-1/cbind(k1)
transition_mtx_mk_clrk <- matrix(transition_mtx_clrk,nrow=30,ncol=30)
plot(transition_mtx_mk_clrk,main="Trasition matrix clrk_net"
____________________________________________________________________________________________________

similrt_mtx_tbl_km_clstr_clrk <- kmeans(similrt_mtx_tbl_clrk,3)

______________________________________________________________________________________________________________

                           analytics requried for web log data 
Which is the most viewed page on the web portal ??
sqldf('select request,COUNT(request) as cnt from user7 group by request order by cnt desc') 


select request,COUNT(request),rank() OVER(ORDER BY COUNT(request) desc) as rank,substr(request,-9,10) from logw 
    WHERE request like '%/http/%' 
    group by request;


_________________________________________________________________________________________________________
                 library("rEMM") work for pridiction 
library("rEMM")
EMMTraffic <- matrix(data = similarti_matrix, nrow = 12, ncol =7, byrow = FALSE,dimnames = NULL)
write.csv('/home/hduser/EMMTraffic')data("EMMTraffic")
data("EMMTraffic")
write.csv(EMMTraffic, '/home/hduser/EMMTraffic', row.names=T)
EMMTraffic1 <- matrix(data = similarti_matrix, nrow = 12, ncol =7, byrow = FALSE,dimnames = NULL)
emm <- EMM(threshold=0.2, measure="eJaccard")
build(emm, EMMTraffic)
size(emm)
ntransitions(emm)
cluster_counts(emm)
plot(emm, method="graph")
install.packages("igraph")
library(igraph)
plot(emm, method="graph")
install.packages("Rgraphviz")
transition_matrix(emm)
transition_matrix(emm, type="counts")
transition(emm, "2", "1", type="probability")
transition(emm, "2", "5", type="probability")
predict(emm, n=2, current="2")
predict(emm, n=2, current="2", probabilities=TRUE)
predict(emm, n=2, current="1")

Hmm <- HMM(threshold=0.2, measure="eculidean")
install.packages("HMM")
library(HMM)
Hmm <- HMM(threshold=0.2, measure="eculidean")

emm_3removed <- remove_clusters(emm, "3")
plot(emm_3removed, method="graph")
install.packages("~/R/Rgraphviz_1.16.0.tar.gz", repos = NULL, type = "source")
emm_fading <- EMM(threshold=0.2, measure="eJaccard",lambda = 1)
build(emm_fading, EMMTraffic)
plot(emm_fading, method="graph")
emm_fading_pruned <- prune(emm_fading, count_threshold=0.1,clusters=TRUE, transitions=TRUE)
_________________________________________________________________________________________
data.frame(EMMTraffic1)
EMMTraffic1<-data.frame(EMMTraffic1)
str(EMMTraffic1)
write.csv(EMMTraffic1, '/home/hduser/EMM_nasa', row.names=T)
emm2<- copy(emm)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

emm_nasa <- emm
  emm_test<- EMMsim_test
  emm_train <- EMMsim_train
_______________________________________________________________________________________--

library("rEMM")
data(EMMTraffic)
EMMTraffic
emm <- EMM(threshold=0.2, measure="eJaccard")
build(emm, EMMTraffic)
size(emm)
ntransitions(emm)
cluster_counts(emm)
cluster_centers(emm)
plot(emm, method="graph")
transition_matrix(emm)
transition_matrix(emm, type="counts")
transition_matrix(emm, type="log_odds")
transition(emm, "2", "1", type="probability")
predict(emm, n=2, current="2")
predict(emm, n=2, current="2", probabilities=TRUE)
emm_3removed <- remove_clusters(emm, "3")
plot(emm_3removed, method="graph")
emm_52removed <- remove_transitions(emm, "5", "2")
plot(emm_52removed, method="graph")
emm_25merged <- merge_clusters(emm, c("2","5"))
plot(emm_25merged, method="graph")
emm_fading <- EMM(threshold=0.2, measure="eJaccard", lambda = 1)
build(emm_fading, EMMTraffic)
plot(emm_fading, method="graph")
emm_fading_pruned <- prune(emm_fading, count_threshold=0.1,clusters=TRUE, transitions=TRUE)
plot(emm_fading_pruned, method="graph")
_____________________________________________________________________________________________________



                                         Visualization options
 data("EMMsim")
 plot(EMMsim_train, col="gray", pch=EMMsim_sequence_train)
 lines(EMMsim_test, col ="gray")
 points(EMMsim_test, col="red", pch=5)
 text(EMMsim_test, labels=1:nrow(EMMsim_test), pos=3)
 emm <- EMM(threshold=0.1, measure="euclidean")
 build(emm, EMMsim_train)
 plot(emm)
 plot(emm, method="graph")
 plot(emm, method="MDS")
 plot(emm, method = "MDS", data=EMMsim_train)
 score(emm, EMMsim_test, method="log_loss")
 score(emm, EMMsim_test, method="likelihood")
 score(emm, EMMsim_test, method="product")
 score(emm, EMMsim_test, method="sum")
 score(emm, EMMsim_test, method="supported_transitions")
 transition_table(emm, EMMsim_test)
 score(emm, EMMsim_test, method="product", match_cluster="nn")
 score(emm, EMMsim_test, method="product", match_cluster="weighted")
 score(emm, EMMsim_test, method="supported_transitions", match_cluster=1.1)
 methods <- c("product", "sum", "log_loss", "likelihood")
 sapply(methods, FUN = function(m)+score(emm, EMMsim_test, method=m, match="weighted"))
## find best predicting model (clustering)
k6 <- 2:10
emmc <- recluster_hclust(emm, k6=k6, method ="average")
plot(attr(emmc, "cluster_info")$dendrogram)
sc <- sapply(emmc, score, EMMsim_test, "log_likelihood")
names(sc) <- k6
sc
__________________________________________________________________________________
EMM_nasa
   X1 X2 X3 X4 X5 X6 X7
1  20 15  6 12 17 13 19
2  18  8 17  5 13  9  2
3   2 15 13 13  5  8  2
4  10  7 17  7  4 16 19
5  19  1  4  6  3  5 16
6   2 14 17 15 15 12  5
7   2 12 17 10 14  1 15
8  19  7  6 13 13  5  3
9  16  9  4  5 13 20 15
10  5  4 11 12  2 18  8
library("rEMM")
emm <- EMM(threshold=0.2, measure="eJaccard")
build(emm, EMM_nasa)
plot(emm, method="graph")
cluster_counts(emm)
transition_matrix(emm)
transition_matrix(emm, type="counts")
transition(emm, "2", "1", type="probability")
predict(emm, n=1, current="1")
predict(emm, n=1, current="8")
predict(emm, n=1, current="9")
predict(emm, n=2, current="9")
predict(emm, n=2, current="2", probabilities=TRUE)
predict(emm, n=3, current="2", probabilities=TRUE)
emm_4 <- remove_clusters(emm, "4")
emm_4 <-remove_clusters(emm_4, "5")
plot(emm_4)
predict(emm, n=1, current="1")
predict(emm, n=1, current="8")
predict(emm, n=1, current="9")
predict(emm, n=2, current="2", probabilities=TRUE)
_____________________________________________________________________________________________
       
      Fit and evaluate a second order transition matrix (Markov Process) in R?

http://stats.stackexchange.com/questions/147164/fit-and-evaluate-a-second-order-transition-matrix-markov-process-in-r
https://cran.r-project.org/web/packages/seqHMM/index.html


dat<-data.frame(replicate(20,sample(c("A", "B", "C","D"), size = 100, replace=TRUE)))
> MC1 <- markovchainFit(dat)
> dat<-data.frame(replicate(20,sample(c("A", "B", "C","D"), size = 100, replace=TRUE)))
> Markovmatrix <- function(X,l=1){
+     tt <- table(X[,-c((ncol(X)-l+1):ncol(X))] , c(X[,-c(1:l)]))
+     tt <- tt / rowSums(tt)
+     return(tt)
+ }
> Markovmatrix(as.matrix(dat),1)
   
            A         B         C         D
  A 0.2551867 0.2614108 0.2302905 0.2531120
  B 0.2835498 0.2142857 0.2445887 0.2575758
  C 0.2543103 0.2435345 0.2629310 0.2392241
  D 0.2378049 0.2459350 0.2317073 0.2845528
> Markovmatrix(as.matrix(dat),2)
   
            A         B         C         D
  A 0.2733189 0.1952278 0.2711497 0.2603037
  B 0.2968037 0.2374429 0.2260274 0.2397260
  C 0.2386364 0.2568182 0.2250000 0.2795455
  D 0.2212581 0.2689805 0.2581345 0.2516269
> 

_________________________________________________________________________________________________________________________-

A <- c(60,70,85)
M <- c("MM","HMM","EMM")
png(file = "prediction_Accuracy.png")
barplot(A,names.arg = M,xlab = "prediction Model",ylab = "Accuracy",col = "blue",main = "prediction Accuracy chart",border = "red")
_______________________________________________________________________________________________________

3D Exploded Pie Chart
library(plotrix)
slis = c(102,203,24,419)
lbl =c("gif","jpeg","mpeg","html")
pie3D(slis,labels=lbl,explode=0.1,main="Pie Chart of files ")
________________________________________________________________

slices <- c(10295,8036,2469,41922)
lbls <- c("gif","jpeg","mpeg","html")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),main="Pie Chart generated showing type of files ") 
_________________________________________________________________________________________
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
   main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2) 

_______________________________________________________

x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
   main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2) 
_____________________________________________________________________________________________
run code for frqn
 h1  <- frqncy_log$Freq
 h <-hist(h1, breaks=10, col="red", xlab="most view page",main="Histogram with frequency ")
______________________________________________________________________________________________








